# Copyright 2019 Smarter Grid Solutions
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http ://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissionsand
# limitations under the License.

cmake_minimum_required(VERSION 3.0.0)

# CMake build for OpenPLC runtime.

# Currently, this CMake file only builds the unit tests for the application - this is
# not currently used for building the actual runtime  on the system.

project(openplc_program)

# If we are building libmodbus, we treat it as an external project
# so include that capability for cmake
include(ExternalProject)

# Include settings that are specific to a particular target environment
include(${PROJECT_SOURCE_DIR}/cmake/settings.cmake)

option(WERROR "Set all warnings to errors" ON)

# Enable building the application with different set of capabilties
# depending on the capabilities that we want.
option(OPLC_ALL "Build all optional capabilities" ON)
option(OPLC_DNP3_OUTSTATION "Enable the DNP3 outstation" OFF)
option(OPLC_MODBUS "Enable the Modbus" OFF)
option(OPLC_NOOP_APP "Enable building a demo app" OFF)
option(OPLC_UNITTEST "Enable unit tests" OFF)
if(OPLC_ALL)
  message("Enabling all optional components")
  set(OPLC_DNP3_OUTSTATION ON)
  set(OPLC_MODBUS ON)
  set(OPLC_NOOP_APP ON)
  set(OPLC_UNITTEST ON)
endif()

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin)

# If we have enabled the DNP3 outstation, then build opendnp3. Opendnp3 is
# CMake based, so we can just add that as a subdirectory and everything will
# work nicely.
if(OPLC_DNP3_OUTSTATION)
    add_subdirectory(utils/dnp3_src bin/dnp3)
    include_directories(utils/dnp3_src/cpp/libs/include)
endif()

# If we have enabled the Modbus, then build Modbus. Modbus is
# Makefile based
if(OPLC_MODBUS)
	# This whole modbus thing isn't nice, but it is how the project has
	# libmodbus directly included and I don't want to change that now
  include_directories(utils/libmodbus_src/src)
	ExternalProject_Add(libmodbus_proj
		SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/utils/libmodbus_src
		BUILD_IN_SOURCE 1
		CONFIGURE_COMMAND ./autogen.sh COMMAND ./configure --prefix=${CMAKE_CURRENT_SOURCE_DIR}/utils/libmodbus_src/install
		BUILD_COMMAND ${MAKE})

	set(LIBMODBUS_INSTALL_DIR ${CMAKE_CURRENT_SOURCE_DIR}/utils/libmodbus_src/install)
	include_directories(${LIBMODBUS_INSTALL_DIR}/include)
	link_directories(${LIBMODBUS_INSTALL_DIR}/lib)
endif()

include_directories(webserver/vendor/spdlog-1.3.1)
include_directories(webserver/vendor/catch2-2.7.0)
include_directories(webserver/vendor/fakeit-2.0.5)
include_directories(webserver/core)
include_directories(webserver/core/lib)

# The OpenPLC core files
file(GLOB oplc_SRC webserver/core/dnp3_publisher.cpp webserver/core/dnp3_receiver.cpp webserver/core/dnp3.cpp)

# In order to build an OPLC application, we need code generated by the glue
# generator for a minimal system. In order to ensure that everything builds
# nicely, we have a empty application that does nothing, but ensures that
# all the right symbols are defined. From this, we can ensure that everything
# builds nicely together.
if (OPLC_NOOP_APP)
	file(GLOB oplcnoop_SRC webserver/example/*.cpp)
	add_executable(oplcnoop ${oplc_SRC} webserver/example/noop.cpp webserver/core/hardware_layers/blank.cpp webserver/core/main.cpp webserver/core/interactive_server.cpp webserver/core/server.cpp webserver/core/modbus.cpp webserver/core/modbus_master.cpp webserver/example/Config0.cpp)

	add_dependencies(oplcnoop libmodbus_proj)
	target_link_libraries(oplcnoop LINK_PUBLIC asiodnp3 libmodbus.so ${OPLC_PTHREAD})
endif()

# Unit tests for the OpenPLC runtime.
if(OPLC_UNITTEST)
	file(GLOB oplctest_SRC webserver/test/*.cpp)
	add_executable(oplctest ${oplctest_SRC} webserver/core/dnp3_publisher.cpp webserver/core/dnp3_receiver.cpp)
	target_link_libraries(oplctest LINK_PUBLIC asiodnp3 ${OPLC_PTHREAD})
endif()
